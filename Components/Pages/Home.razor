@page "/"

<MudContainer Class="page-container">
    <MudContainer Class="wrapper">
        <MudNumericField HideSpinButtons="true" T="uint?" Placeholder="0" Class="input" Style="color: rgba(255,255,255,0.8);"></MudNumericField>
        <MudButton Class="open-modal-btn" OnClick="OpenModal" Ripple="false">
            @if (chosenCrypto == null)
            {
                <div Style="position: relative; top: 5px; margin-right: 45px;">
                    <MudText Style="color: rgba(255, 255, 255, 0.8);">▼</MudText>
                </div>
            }
            else
            {
                <div class="adornment">
                    <MudImage Src="@chosenCrypto.ImgRoute" Alt="@chosenCrypto.ShortName"/>
                    <div class="chosen-crypto-name-adornment">
                        <MudText Class="chosen-crypto-name">@chosenCrypto.ShortName</MudText>
                        <MudText Class="btc chosen-crypto-short-name">@chosenCrypto.ShortName</MudText>
                    </div>
                    <MudText Class="dropdown-arrow">▼</MudText>
                </div>
            }
        </MudButton>
    </MudContainer>
    @if (showModal)
    {
        <MudContainer Class="items-container">
            <MudTextField T="string" @bind-Value="cryptoSearchValue" Placeholder="Search"Style="color: rgba(255, 255, 255, 0.8);"
                          OnKeyUp="HandleCryptoSearch"></MudTextField>

            <MudText Class="title">Popular</MudText>
            
            @foreach (var crypto in shownCryptoList)
            {
                <MudButton OnClick="() => ChooseCryptoByName(crypto.Name)" Class="item">
                    <MudImage Src="@crypto.ImgRoute" Alt="@crypto.ShortName"></MudImage>
                    <MudText Class="short-name btc">@crypto.ShortName</MudText>
                    <MudText Class="name">@crypto.Name</MudText>
                    <MudText Class="network">@crypto.Network</MudText>
                </MudButton>
            }
        </MudContainer>
    }
</MudContainer>

@code{

    class CryptoModel
    {
        public string Name { get; set; }
        public string ShortName { get; set; }
        public string Network { get; set; }
        public string ImgRoute { get; set; }
    }

    private string cryptoSearchValue = string.Empty;
    private CryptoModel? chosenCrypto;
    bool showModal = false;
    private List<CryptoModel> cryptoList = new()
    {
        new CryptoModel{Name = "Bitcoin", ShortName = "BTC", Network = "NATIVE", ImgRoute = "img/BTC(BTC).svg"},
        new CryptoModel{Name = "Tether", ShortName = "USDT", Network = "TRC20", ImgRoute = "img/USDT(TRC20).svg"},
        new CryptoModel{Name = "Ethereum", ShortName = "ETH", Network = "ERC20", ImgRoute = "img/ETH(ERC20).svg"},
        new CryptoModel{Name = "Monero", ShortName = "XMR", Network = "XMR", ImgRoute = "img/XMR(XMR).svg"},
        new CryptoModel{Name = "Binance Coin", ShortName = "BNB", Network = "BEP20", ImgRoute = "img/BNB(BEP20).svg"}
    };

    private List<CryptoModel> shownCryptoList;

    void OpenModal()
    {
        cryptoSearchValue = string.Empty;
        shownCryptoList = cryptoList;
        showModal = !showModal;
    }

    void ChooseCryptoByName(string cryptoName)
    {
        chosenCrypto = cryptoList.Single(x => x.Name == cryptoName);
        showModal = false;
    }

    void HandleCryptoSearch(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
            SearchCrypto();
    }

    void SearchCrypto()
    {
        cryptoSearchValue = cryptoSearchValue.ToLower();
        if (!string.IsNullOrEmpty(cryptoSearchValue))
        {
            shownCryptoList = cryptoList.Where(x => x.Name.ToLower().Contains(cryptoSearchValue) 
                || x.ShortName.ToLower().Contains(cryptoSearchValue) || x.Network.ToLower().Contains(cryptoSearchValue))
                .ToList();
        }
        else
        {
            shownCryptoList = cryptoList;
        }
    }
}

<style>
    .chosen-crypto-name-adornment {
        display: flex;
        flex-direction: column;
        margin-left: 3px;
    }

    .chosen-crypto-name {
        color: white;
        height: 18px;
        font-size: 12px;
    }

    .chosen-crypto-short-name {
        height: 14px;
        font-size: 10px;
        border-radius: 4px;
    }

    .dropdown-arrow {
        margin-left: 5px;
        color: rgba(255, 255, 255, 0.8);
    }

    .adornment {
        display:flex;
        align-items: center;
        margin-right: 45px;
    }

    .chosen-crypto-container {
        display: flex;
    }

    .page-container {
        width: 500px;
        background: black;
        margin-top: 20px;
        padding: 10px;
    }

    .wrapper {
        display: flex;
        position: relative;
        width: 100%;
    }

    .input{
        padding: 5px 75px 5px 0;
        width: 100%;
        color: white;
    }

    .open-modal-btn {
        position: absolute;
        right: 0;
        width: 30px;
        border: none;
        background: transparent;
    }

    .items-container {
        width: 100%;
        padding-top: 20px;
    }

    .title {
        padding: 10px 0;
        color: rgba(255,255,255, 0.7);
    }

    .item {
        width: 100%;
        justify-content: center;
        align-items: center;
        padding: 10px 0;
        display: flex;
        border-top: 1px solid rgba(255, 255, 255, 0.3);
    }

    .short-name {
        margin: 7px;
        font-size: 10.6px;
        color: white;
        border-radius: 4px;
        padding: 1px 3px;
    }

    .network {
        margin-left: auto;
        color: rgba(255,255,255, 0.7)
    }

    .btc {
        background-color: orange;
    }

    .usdt {
        background-color: rgba(0, 190, 175, 1);
    }

    .eth {
        background-color: rgba(0, 122, 255, 1);
    }

    .xmr {
        background-color: darkorange;
    }

    .bnb {
        background-color: rgba(255, 185, 24, 1);
    }

    .name {
        color: rgba(255,255,255, 0.7);
    }
</style>